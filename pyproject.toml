[tool.poetry]
name = "fastapi-redis-cache-reborn"
version = "0.3.1"
description = "A simple and robust caching solution for FastAPI endpoints using Redis."
authors = ["Grant Ramsay <seapagan@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "fastapi_redis_cache", from = "." }]

repository = "https://github.com/seapagan/fastapi-redis-cache-reborn"
documentation = "https://seapagan.github.io/fastapi-redis-cache-reborn/"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Framework :: FastAPI",
]

[tool.poetry.urls]
"Pull Requests" = "https://github.com/seapagan/fastapi-redis-cache-reborn/pulls"
"Bug Tracker" = "https://github.com/seapagan/fastapi-redis-cache-reborn/issues"
"changelog" = "https://github.com/seapagan/fastapi-redis-cache-reborn/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.7.1"
redis = "^5.0.4"
fastapi = { extras = ["all"], version = ">=0.110.2,<0.112.0" }
tzlocal = "^5.2"

[tool.poetry.group.dev.dependencies]
# linting etc
mypy = "^1.10.0"
pre-commit = "^3.7.0"
ruff = "^0.4.2"
pymarkdownlnt = "^0.9.17"

# task runner
poethepoet = ">=0.25.1,<0.27.0"

# testing
requests = "^2.31.0"
fakeredis = "^2.22.0"
faker = ">=24.14,<26.0"
mock = "^5.1.0"
pyfakefs = "^5.4.1"
pytest = "^8.1.2"
pytest-asyncio = "0.23.7"
pytest-cov = "^5.0.0"
pytest-env = "^1.1.3"
pytest-mock = "^3.14.0"
pytest-order = "^1.2.1"
pytest-randomly = "^3.15.0"
pytest-reverse = "^1.7.0"
pytest-sugar = "^1.0.0"
pytest-watcher = "^0.4.2"

# documentation
github-changelog-md = "^0.9.3"
mkdocs = "^1.5.3"
mkdocs-autorefs = "^1.0.1"
mkdocs-material = "^9.5.12"
mkdocs-git-revision-date-localized-plugin = "^1.2.4"
mkdocs-latest-git-tag-plugin = "^0.1.2"
mkdocs-minify-plugin = ">=0.8.0"
mkdocstrings = ">=0.24.1"
pymdown-extensions = "^10.7"
pygments = "^2.17.2"

# needed for mupy typing
types-python-dateutil = "^2.9.0.20240316"
types-redis = "^4.6.0.20240425"
types-tzlocal = "^5.1.0.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.help = "Format code with Ruff"
format.cmd = "ruff format ."
ruff.help = "Run Ruff checks"
ruff.cmd = "ruff check ."
markdown.cmd = "pymarkdown --strict-config scan  -r docs/**/*.md"
markdown.help = "Run markdown checks"

# testing tasks
test.help = "Run all tests using Pytest"
test.cmd = "pytest"
"test:unit".help = "Run only Unit tests using Pytest"
"test:unit".cmd = "pytest -m unit"
"test:integration".help = "Run only Integration tests using Pytest"
"test:integration".cmd = "pytest -m integration"
"test:skipped".cmd = "pytest --quiet --collect-only -m skip --no-cov"
"test:skipped".help = "Show skipped tests without running all tests"

# tasks to deal with documentation
"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

# generate the CHANGELOG.md file
changelog.cmd = "github-changelog-md"
changelog.help = "Generate the CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
plugins.md013.enabled = false
plugins.md040.enabled = false
plugins.md041.enabled = false

[tool.ruff]
line-length = 80
src = ["app"]
extend-exclude = []
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
extend-ignore = [
  "COM812", # ignored for ruff formatting
  "ISC001", # ignored for ruff formatting
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files.
  "ARG001", # sometimes fixtures are not physically used but have side-effects
  "ARG002", # as above
  "TD003",
  "FIX002",
  "RUF012",
]
"fastapi_redis_cache/client.py" = ["ANN401"]


[tool.ruff.lint.flake8-bugbear]
# extend-immutable-calls = [
#   "fastapi.Depends",
#   "fastapi.params.Depends",
#   "fastapi.Query",
#   "fastapi.params.Query",
# ]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.isort]
known-first-party = ["fastapi_redis_cache"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.9"
exclude = []

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "decouple.*"

[tool.pytest.ini_options]
addopts = [
  "-m",
  "not rewrite",  # mark tests 'rewrite' that need work, and they wont be run
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = [
  "ignore:The 'app' shortcut is now deprecated:DeprecationWarning",
]
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "rewrite: Tests need Rewriting",
]
testpaths = ["tests"]
mock_use_standalone_module = true

[tool.coverage.run]
# source = []
source = ["fastapi_redis_cache"]
omit = ["*/tests/*"]
# concurrency = ["thread", "greenlet"]
